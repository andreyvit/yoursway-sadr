;*******************************************************************************
;
;  MODULE :  PROFILER
;
;  PURPOSE :  profile the execution of DTL procedures
;
;*******************************************************************************

using .					


;*******************************************************************************
;  
;  CLASS DEFINITION :
;
;*******************************************************************************

dtl$object:subclass "Profiler", 

; instance variables

	"",

; class variables

	"calls," +-			; calls dictionary
	"callers," +-			; callers dictionary
	"timers," +-			; timers dictionary
	"call_stack," +-		; call stack
	"timer_stack," +-		; timer stack
 	"clock," +-			; current timer
	"is_running," +-		; is the profiler running ?
	"hartbeat"			; hartbeat


;*******************************************************************************
;  
;  CLASS INITIALISATION :
;
;*******************************************************************************

procedure  Profiler::init ()
  calls == T_Dict:new (100)
  callers == T_Dict:new (100)
  timers == T_Dict:new (100)
  call_stack = %nil
  timer_stack = %nil
  clock = %nil;  T_Timer.Current = %nil
  is_running = FALSE
  hartbeat = 0
end


;*******************************************************************************
;  
;  CLASS VARIABLES :
;
;*******************************************************************************

procedure  Profiler::Clock ();  return  clock;  end

procedure  Profiler::setClock (c);  clock == c;  end


procedure  Profiler::IsRunning ();  return  is_running;  end


;*******************************************************************************
;  
;  CLASS METHODS :
;
;*******************************************************************************

procedure  Profiler::Start ()
  if is_running then  return

  ; initialise

  call_stack == T_Stack:new (20)
  timer_stack == T_Stack:new (20)
  clock = %nil;  T_Timer.Current = %nil

  is_running = TRUE  
  hartbeat = 0

  ; show message

  setscroll (40, TRUE);  setscroll (4, FALSE)

  showfield ("Profiler is running", 1, 1, 80, 14)
  showfield ("", 2, 1, 80, 2)

  ; start profiler

  _prof_ (1, 1);  _prof_ (2, 1)
end


procedure  Profiler::Stop ()
  ; stop profiler

  _prof_ (1, 0);  _prof_ (2, 0)

  is_running = FALSE

  ; show message

  showfield ("Profiler has stopped", 1, 1, 80, 2)

  ; eliminate negative timings

  for i = 0 to timers.Used - 1
    local  timer == timers:At (i)

    if (timer.Value < 0) then  timer.Value = 0
  od
end


procedure  Profiler::Reset ()
  if is_running then  self:Stop ()

  calls == T_Dict:new (100)
  callers == T_Dict:new (100)
  timers == T_Dict:new (100)
  call_stack = %nil
  timer_stack = %nil
  clock = %nil;  T_Timer.Current = %nil

  setscroll (4, TRUE);  setscroll (0, FALSE)
end


procedure  Profiler::Show (minimum_percentage = 0.1, filespec = %nil)
  ; calculate total elapsed time

  local  total_elapsed_time = self:TotalElapsedTime ()

  ; write file header

  local  file = %nil

  if not isnil (filespec) 
    file = fopenw (fparse (filespec, ".pro") )

    if isnil (file) then  type "Error opening file ", filespec
  fi

  if not isnil (file)
    fputstr (file, upcase (filespec) + " - " + upcase (filespec) + " - " + upcase (filespec) )
    fputstr (file, "")
    fputstr (file, string (hartbeat) + " calls profiled in " + fmtstr ("%%%%%~", total_elapsed_time) + " seconds")
    fputstr (file, "")
    fputstr (file, "")
  fi

  if not isnil (file) then  showfield ("Writing file", 2, 1, 80, 14)

  ; extract all calls above the given percentage

  local  extracted_calls == T_Dict:new ()

  for i = 0 to calls.Used - 1
    local  name = calls:KeyAt (i)

    local  timer == timers:ObjectOf (name)

    if (100 * timer.Value / total_elapsed_time >= minimum_percentage)
      extracted_calls:Add (name, calls:At (i) )
    fi
  od

  self:ShowSortedByTime (file, extracted_calls)
  self:ShowSortedByCalls (file, extracted_calls)
  self:ShowSortedByCost (file, extracted_calls)
  self:ShowSortedByName (file, extracted_calls)

  if not isnil (file) then  showfield ("", 2, 1, 80, 2)

  if not isnil (file) then  fclose (file)
end


procedure  Profiler::TotalElapsedTime ()
  local  total_elapsed_time = 0

  for i = 0 to timers.Used - 1
    local  timer == timers:At (i)

    total_elapsed_time = total_elapsed_time + timer.Value
  od

  return  total_elapsed_time
end


procedure  Profiler::ShowCall (call, times, elapsed_time, percentage, file)
  if (elapsed_time < 0.01) then  elapsed_time = 0.00
  if (percentage < 0.01) then  percentage = 0.00

  if isnil (file)
    type  fmtstr ("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%~", call) + " | " + 	-
          fmtstr ("%%%%^~ times", times) + " | " +  				-
          fmtstr ("%%%%~ s (= %%%%~ %)", elapsed_time, percentage, "%") + " | " +		-
	  fmtstr ("%%%%~ ms", elapsed_time / times * 1000)
  else
    fputstr (file, fmtstr ("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%~", call) + " | " + 	-
                   fmtstr ("%%%%^~ times", times) + " | " +  				-
                   fmtstr ("%%%%~ s (= %%%%~ %)", elapsed_time, percentage, "%") + " | " +		-
	   	   fmtstr ("%%%%~ ms", elapsed_time / times * 1000) )
  fi
end


procedure  Profiler::ShowSortedByTime (file = %nil, calls)
  if is_running then  self:Stop ()

  ; calculate total elapsed time

  local  total_elapsed_time = self:TotalElapsedTime ()

  ; show results

  if isnil (file) 
    showfield ("Type ENTER to show results sorted by time (^Z to skip results)", 2, 1, 80, 14)

    if (%getkey () = "^Z") 
      showfield ("", 2, 1, 80, 2)

      return
    fi

    showfield ("", 2, 1, 80, 2)

    setvideo (2);  type "PROFILER RESULTS SORTED BY TIME :";  setvideo (-2)
    type ""
  else
    fputstr (file, "PROFILER RESULTS SORTED BY TIME :")
    fputstr (file, "")
  fi

  ; keep track of the total percentage of all lines shown

  local  total_percentage = 0

  ; keep track of the calls already shown

  local  already_shown_calls == T_Dict:new (100)

  for i = 0 to calls.Used - 1
    local  call = %nil;  local  max_value = -1E4

    for j = 0 to calls.Used - 1
      local  name = calls:KeyAt (j)

      local  timer == timers:ObjectOf (name)

      if (timer.Value > max_value) and (not already_shown_calls:IsKey (name) )
        call = name;  max_value = timer.Value
      fi
    od

    local  times = calls:ObjectOf (call)

    local  elapsed_time = max_value

    local  percentage = 100 * elapsed_time / total_elapsed_time

    total_percentage = total_percentage + percentage

    self:ShowCall (call, times, elapsed_time, percentage, file)

    already_shown_calls:Add (call, %nil)
  od

  if isnil (file)
    type ""
    type "(total percentage shown calls : ", total_percentage, ")"
    type ""
    type ""
  else
    fputstr (file, "")
    fputstr (file, "(total percentage shown calls : " + string (total_percentage) + ")")
    fputstr (file, "")
    fputstr (file, "")
  fi
end


procedure  Profiler::ShowSortedByCalls (file = %nil, calls)
  if is_running then  self:Stop ()

  ; calculate total elapsed time

  local  total_elapsed_time = self:TotalElapsedTime ()

  ; show results

  if isnil (file) 
    showfield ("Type ENTER to show results sorted by calls (^Z to skip results)", 2, 1, 80, 14)

    if (%getkey () = "^Z") 
      showfield ("", 2, 1, 80, 2)

      return
    fi

    showfield ("", 2, 1, 80, 2)

    setvideo (2);  type "PROFILER RESULTS SORTED BY CALLS :";  setvideo (-2)
    type ""
  else
    fputstr (file, "PROFILER RESULTS SORTED BY CALLS :")
    fputstr (file, "")
  fi

  ; keep track of the total percentage of all lines shown

  local  total_percentage = 0

  ; keep track of the calls already shown

  local  already_shown_calls == T_Dict:new (100)

  for i = 0 to calls.Used - 1
    local  call = %nil;  local  max_value = -1E4

    for j = 0 to calls.Used - 1
      local  name = calls:KeyAt (j)

      local  value = calls:ObjectOf (name)

      if (value > max_value) and (not already_shown_calls:IsKey (name) )
        call = name;  max_value = value
      fi
    od

    local  times = max_value

    local  timer == timers:ObjectOf (call);  local  elapsed_time = timer.Value

    local  percentage = 100 * elapsed_time / total_elapsed_time

    total_percentage = total_percentage + percentage

    self:ShowCall (call, times, elapsed_time, percentage, file)

    already_shown_calls:Add (call, %nil)
  od

  if isnil (file)
    type ""
    type "(total percentage shown calls : ", total_percentage, ")"
    type ""
    type ""
  else
    fputstr (file, "")
    fputstr (file, "(total percentage shown calls : " + string (total_percentage) + ")")
    fputstr (file, "")
    fputstr (file, "")
  fi
end


procedure  Profiler::ShowSortedByCost (file = %nil, calls)
  if is_running then  self:Stop ()

  ; calculate total elapsed time

  local  total_elapsed_time = self:TotalElapsedTime ()

  ; show results

  if isnil (file) 
    showfield ("Type ENTER to show results sorted by cost (^Z to skip results)", 2, 1, 80, 14)

    if (%getkey () = "^Z") 
      showfield ("", 2, 1, 80, 2)

      return
    fi

    showfield ("", 2, 1, 80, 2)

    setvideo (2);  type "PROFILER RESULTS SORTED BY COST :";  setvideo (-2)
    type ""
  else
    fputstr (file, "PROFILER RESULTS SORTED BY COST :")
    fputstr (file, "")
  fi

  ; keep track of the total percentage of all lines shown

  local  total_percentage = 0

  ; keep track of the calls already shown

  local  already_shown_calls == T_Dict:new (100)

  for i = 0 to calls.Used - 1
    local  call = %nil;  local  max_value = -1E4

    for j = 0 to calls.Used - 1
      local  name = calls:KeyAt (j)

      local  value = calls:ObjectOf (name)
      local  timer = timers:ObjectOf (name)

      if (timer.Value / value > max_value) and (not already_shown_calls:IsKey (name) )
        call = name;  max_value = timer.Value / value
      fi
    od

    local  times = calls:ObjectOf (call)

    local  timer == timers:ObjectOf (call);  local  elapsed_time = timer.Value

    local  percentage = 100 * elapsed_time / total_elapsed_time

    total_percentage = total_percentage + percentage

    self:ShowCall (call, times, elapsed_time, percentage, file)

    already_shown_calls:Add (call, %nil)
  od

  if isnil (file)
    type ""
    type "(total percentage shown calls : ", total_percentage, ")"
    type ""
    type ""
  else
    fputstr (file, "")
    fputstr (file, "(total percentage shown calls : " + string (total_percentage) + ")")
    fputstr (file, "")
    fputstr (file, "")
  fi
end


procedure  Profiler::ShowCaller (caller, times, file)
  if isnil (file)
    type  fmtstr ("  called %%%%%^ times by %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%~", times, caller)
  else
    fputstr (file, fmtstr ("  called %%%%%^ times by %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%~", times, caller) )
  fi
end


procedure  Profiler::ShowSortedByName (file = %nil, calls)
  if is_running then  self:Stop ()

  ; calculate total elapsed time

  local  total_elapsed_time = self:TotalElapsedTime ()

  ; show results

  if isnil (file) 
    showfield ("Type ENTER to show results sorted by name (^Z to skip results)", 2, 1, 80, 14)

    if (%getkey () = "^Z") 
      showfield ("", 2, 1, 80, 2)

      return
    fi

    showfield ("", 2, 1, 80, 2)

    setvideo (2);  type "PROFILER RESULTS SORTED BY NAME :";  setvideo (-2)
    type ""
  else
    fputstr (file, "PROFILER RESULTS SORTED BY NAME :")
    fputstr (file, "")
  fi

  ; keep track of the calls already shown

  local  already_shown_calls == T_Dict:new (100)

  for i = 0 to calls.Used - 1
    local  call = chr (255)

    for j = 0 to calls.Used - 1
      local  name = calls:KeyAt (j)

      if (name < call) and (not already_shown_calls:IsKey (name) )
        call = name
      fi
    od

    local  times = calls:ObjectOf (call)

    local  timer == timers:ObjectOf (call);  local  elapsed_time = timer.Value

    local  percentage = 100 * elapsed_time / total_elapsed_time 

    self:ShowCall (call, times, elapsed_time, percentage, file)

    ; show callers dictionary
  
    if not isnil (file)
      local  called_by == callers:ObjectOf (call)
  
      for j = 0 to called_by.Used - 1
        local  caller = called_by:KeyAt (j)
  
        times = called_by:ObjectOf (caller)
  
        self:ShowCaller (caller, times, file)
      od
    fi

    already_shown_calls:Add (call, %nil)
  od

  if isnil (file)
    type ""
    type ""
  else
    fputstr (file, "")
    fputstr (file, "")
  fi
end


procedure  Profiler::OnEntry (name)
  ; show hartbeat

  hartbeat = hartbeat + 1

  if (mod (hartbeat, 2500) = 0) 
    showfield ("Profiler is running : " + fmtstr ("% calls profiled so far", hartbeat), 1, 1, 80, 14)
  fi

  ; update dictionaries

  if calls:IsKey (name)
    local  times == calls:ObjectOf (name)
    
    clock == timers:ObjectOf (name)

    local  called_by == callers:ObjectOf (name)
  else
    times = 0;  calls:Add (name, times)
    
    clock == T_Timer:new ();  timers:Add (name, clock)

    called_by == T_Dict:new (5);  callers:Add (name, called_by)
  fi

  times = times + 1

  calls:SetAtKey (name, times)

  ; update callers dictionary

  local  caller = call_stack.Top

  if not isnil (caller)
    if called_by:IsKey (caller)
      times == called_by:ObjectOf (caller)
    else
      times = 0;  called_by:Add (caller, times)
    fi

    times = times + 1

    called_by:SetAtKey (caller, times)
  fi

  ; update stacks

  call_stack:Push (name);  timer_stack:Push (clock)

  ; set the current timer

  T_Timer.Current == clock
end


procedure  Profiler::OnExit (name)
  if isnil (clock) then  return

  ; redundant check ...
 
  if (call_stack.Top <> name)
    ; stop profiler

    _prof_ (1, 0);  _prof_ (2, 0)

    is_running = FALSE

    showfield ("Profiler has stopped : INTERNAL ERROR", 1, 1, 80, 2)

    return
  fi

  ; update stacks

  call_stack:Pop ();  timer_stack:Pop ()

  ; continue previously running timer

  if not isnil (timer_stack.Top) 
    clock == timer_stack.Top

    T_Timer.Current == clock
  else
    T_Timer.Current = %nil
  fi
end


;*******************************************************************************
;  
;  PROCEDURES :
;
;*******************************************************************************

procedure  dtl$profile (name, proftype, brktype)
  ; ignore the following procedure calls :

  if (name = "profiler::stop") 
    Profiler.Clock = %nil;  T_Timer.Current = %nil

    return
  fi

  if (name = "_prof_") then  return

  ; dispatch breaks

  if (brktype = 1) 
    Profiler:OnEntry (name)
  else	; elsif (brktype = 2) 
    Profiler:OnExit (name)
  fi
end
	

;*******************************************************************************
;  
;  CLASS DEFINITION :
;
;*******************************************************************************

V_Menu:subclass "ProfilerMenu"


;*******************************************************************************
;  
;  INSTANCE METHODS :
;
;*******************************************************************************

procedure  ProfilerMenu:init (...)
  super:init (...)

  self:Build ()
end


procedure  ProfilerMenu:Build ()
  local  start == V_Button:new (self, self.Name + "Start", "Start")
  local  stop == V_Button:new (self, self.Name + "Stop", "Stop")
  local  reset == V_Button:new (self, self.Name + "Reset", "Reset")

  V_Separator:new (self)

  local  show == V_Button:new (self, self.Name + "Show", "Show")
  local  dump == V_Button:new (self, self.Name + "Dump", "Dump")

  start.ClickAction = "Profiler:Start ()"  
  stop.ClickAction = "Profiler:Stop ()"  
  reset.ClickAction = "Profiler:Reset ()"  
  show.ClickAction = "Profiler:Show ()"  
  dump.ClickAction = "Profiler:Show (1000 , \"dump.pro\")"  
end


;*******************************************************************************
;  
;  INITIALISATION :
;
;*******************************************************************************

Profiler:init ()

; add profiler menu (only in case the application has already started up !)

global  appl

if (not isnil (appl) ) and (isnil (V_UIObj:Get ("Profiler") ) ) then  ProfilerMenu:new (appl, "Profiler", "Profiler")

