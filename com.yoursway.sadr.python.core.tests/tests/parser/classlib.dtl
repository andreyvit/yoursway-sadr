;==================================================================
;		CLASSLIB
;==================================================================
; RC JUN '93

; OBJECTS

global  dbgtmp = dtl$debug
dtl$debug = 0

using .


procedure  min (a, b)
  if (a < b) then  return  a

  return  b
end


procedure  max (a, b)
  if (a > b) then  return  a

  return  b
end


procedure  abs (a)
  if (a < 0) then  return  - a

  return  a
end


;---------------------------
dtl$object:subclass  "t_iter", "key,dir,obj"
;---------------------------
; iterator

procedure  t_iter:init (o, d = 1)
  obj == o
;  obj==o:init			; make an empty one, we just need the type

  if d > 0          	; forward
    dir = 1
  else              	; backward
    dir = - 1
  fi

  key = %nil
end


procedure  t_iter:assign ();  return  self;  end


procedure  t_iter:rewind
  key = %nil
end


procedure  t_iter:next
  local  k
  k == obj:nextkey (key, dir)
;  ty "next key is ",k    

  if isnil (k) then  return  %nil	; fail

  key == k
;  ty "return obj of ",key

  return  obj:iterobj (key)
end


procedure  t_iter:previous
  local  k
  k == obj:nextkey (key, - dir)
;  ty "previous key is ",k    

  if isnil (k) then  return  %nil	; fail

  key == k
;  ty "return obj of ",key

  return  obj:iterobj (key)
end


procedure  t_iter:done	; bool
  local  k == obj:nextkey (key, dir)
;  ty "test done is ",k    

  return  isnil (k)
end


;====================================================
; compare two dtlobjects
;====================================================

procedure  isequal (a, b)
; implementation overruled by the code after it, on request of RHAL
;  if is_ident (a, b) then  return  1
;
;  if (sizeof (a) = sizeof (b) )
;    if (sizeof (a) = 0)
;      if (isnumber (a) ) and (isnumber (b) ) and (a = b) then  return  1
;      if (isstring (a) ) and (isstring (b) ) and (a = b) then  return  1
;    else
;      for i = 0 to sizeof (a) - 1
;        if not isequal (a[i], b[i]) then  return  0
;      od
;
;      return  1
;    fi
;  fi
;
;  return  0

  if is_ident (a, b) then return 1
  if isnumber(a) then return isnumber(b) and a=b
  if isstring(a) then return isstring(b) and a=b
  local items1 = -1
  local items2 = -2
  if isarray(a) and isarray(b)
    items1 = sizeof(a)
    items2 = sizeof(b)
  elsif isinst(a) and isinst(b) and a.classname=b.classname and (a:has_superclass("T_Array") or a:has_superclass("T_Dict"))
      items1 = a.used
      items2 = b.used
  fi
  if items1<>items2 then return 0
  for i = 0 to items1-1 do if not isequal(a[i], b[i]) then return  0
  return 1
end


;procedure isequal(o1,o2)
;local it1,it2
;local obj1,obj2
;local d1,d2
;local n
;  if is_ident(o1,o2) then return 1
;  if dumpobj(o1,1)=dumpobj(o2,1)	; zelfde type
;    if dumpobj(o1,1)="Proc"
;      return is_ident(o1,o2)
;    elsif isinst(o1)			; object
;      if dumpobj(o1,2)=dumpobj(o2,2)	; zelfde ID
;        return 1
;      else				; iterate over object
;        if o1:has_method("nextkey")
;          it1==t_iter:new(o1)
;          it2==t_iter:new(o2)
;          do
;            exif it1:done
;            obj1==it1:next
;            if it2:done then return 0	; different count
;            obj2==it2:next
;            if not isequal(obj1,obj2) then return 0
;          od
;          if it2:done then return 1	; same count
;        else
;          d1=o1:todict
;          d2=o2:todict
;          return isequal(d1,d2)
;        fi
;      fi
;    elsif sizeof(o1)=0			; int or string
;      return o1=o2
;    elsif isdict(o1)			; dict (recursive)
;      if symbol(o1[0],0)<>symbol(o2[0],0) then return 0
;      for i=1 to symbol(o1[0],0)
;        n=symbol(o1[0],i)
;        if not isequal(o1[n],o2[n]) then return 0
;      od
;      return 1
;    elsif sizeof(o1)=sizeof(o2)		; array (recursive)
;      for i=0 to sizeof(o1)-1
;        if not isequal(o1[i],o2[i]) then return 0
;      od
;      return 1
;    fi
;  fi
;  return 0		; not same type
;end


;========================================================
; dump dtlobject
;========================================================

procedure  dump (o, lev = "")
  local  it
  local  obj
  local  n
  local  di
  local  sp = "    "

  if isinst (o)     	; object
    if o:has_method ("nextkey")
      ty  o:classname
      it == t_iter:new (o)

      do 
        exif  it:done

        obj == it:next	; en als er geen nextkey bestaat ?
        typef  lev, sp
        dump (obj, lev + sp)
      od
    else            	; gebruik dan todict !
      n = o:classname
      typef  n, " to"	; blijf op zelfde niveau
;      typef o:classname," "		; gaat ook niet ineens
      di = o:todict
      dump (di, lev)	; verhoog level NIET
;      ty "call todict of ",o
;      dump(o:todict,lev+sp)		; gaat niet ineens ?
    fi
  elsif sizeof (o) = 0	; int or string
    ty  o
  elsif isdict (o)  	; dict (recursive)
    ty  "Dict"

    for i = 1 to symbol (o[0], 0)
      n = symbol (o[0], i)
      typef  lev, sp, "[", n, "]= "
      dump (o[n], lev + sp)
    od
  elsif sizeof (o)  	; array (recursive)
    ty  "Array"

    for i = 0 to sizeof (o) - 1
      typef  lev, sp, "[", i, "]: "
      dump (o[i], lev + sp)
    od
  fi
end


;---------------------------
dtl$object:subclass  "t_object", "a,size,ext,cnt"
;---------------------------
; generic object

procedure  t_object:assign ();  return  self;  end


procedure  t_object:size;  return  size;  end


procedure  t_object:isempty	; bool
  return  (self.used = 0)
end


procedure  t_object:extend
; some want to add something, we prefer to multiply with a percentage
  local  x = int (ext * size / 100)
  local  minx = 1
;  ty x,ext,size

  if x < minx then  x = minx

  return  x
end


procedure  t_object::selftest
  self:submustprovide
end


procedure  t_object:exec (obj, funct, ...)
  local  args = ...
  local  command = ""

  if isinst (obj)
    funct = lowcase (funct)

    if obj:has_method (funct)
;      ty "mesg ",obj,funct,...
; dit kan het object veranderen !

      return  obj:mesg (funct, ...)	; simpeler dan evalmesg

;      if funct <> "show" then obj:show
    else  
      for i = 0 to sizeof (args) - 1
        if i = 0
          command = string (args[0])
        else  
          command = command + "," + string (args[i])
        fi
      od

      ty  "eval ", obj

      return  eval (funct + "(" + command + ")")	;...
    fi
  else  
    ty  "loop on : ", obj, " (not an object)"

    return  %nil
  fi
end


procedure  t_object:forall (funct, ...)
  local  it == t_iter:new (self)
  local  obj

  do 
    exif  it:done

    obj == it:next  	; omdat het object moet kunnen veranderd worden
;    ty ("Loop ",obj,funct,...)
    self:exec (obj, funct, ...)	; heeft geen enkele zin
  od
end


procedure  t_object:DoUntil (cond, funct, ...)
  local  it == t_iter:new (self)
  local  obj

  do 
    exif  it:done

    obj == it:next
;    ty ("Loop ",obj,funct,...)

    if self:Exec (obj, funct, ...) = cond then  return  0
  od

  return  1
end


procedure  t_object:foreach (cond, funct, ...)
  local  it == t_iter:new (self)
  local  obj

  do 
    exif  it:done

    obj == it:next  	; omdat het object moet kunnen veranderd worden
;    ty ("Loop ",obj,funct,...)

    if self:exec (obj, cond)
      self:exec (obj, funct, ...)
    fi
  od
end


procedure  t_object:foralldown (funct, ...)
  local  it == t_iter:new (self, - 1)
  local  obj

  do 
    exif  it:done

    obj == it:next  	; omdat het object moet kunnen veranderd worden
;    ty ("Loop ",obj,funct,...)
    self:exec (obj, funct, ...)
  od
end


;---------------------------
t_object:subclass  "t_array", "fst,lst"
;---------------------------
; generic array
; indexes should be legal

procedure  t_array:init (d = 10, e = 42)
  if d <= 0 then  self:error ("Cannot create array with " + string (d) + " elements")

  fst = 0           	; points at first used
  lst = 0           	; points at first free
  size = d;  ext = e;  a = array (d)
end


procedure  t_array:setused (u)
  if fst = 0
    lst = u
  else  
    self:error  "Cannot change used when the first is not zero"
  fi
end


procedure  t_array:used;  return  lst - fst;  end


procedure  t_array:fst;  return  fst;  end	; private


procedure  t_array:lst;  return  lst;  end	; private


procedure  t_array:exec (obj, funct, ...)
  if isnil (obj) then  return  0

  super:exec (obj, funct, ...)
end


procedure  t_array:setat (i, v)
;  if i>=0 and i<size		; test valid i

  if i >= 0         	; test valid i
    if i >= size
      if ext > 0
        local  x = self:extend
        local  tmp = array (i + x)	; dit copieert de data niet

        for j = 0 to size - 1
          tmp[j] == a[j]
        od

        a == tmp
        size = i + x
      fi
    fi

    if i < size
      if i >= lst then  lst = i + 1

      a[i] == v
    else  
      self:error  "Cannot grow to set at " + string (i)
    fi
  else  
    self:error  "Cannot set at " + string (i)
  fi
end


; setat without grow and with protection 
procedure  t_array:setatsafe (i, v)
  if i >= 0 and i < size	; test valid i
    if i >= lst then  lst = lst + 1

    a[i] == v
  else  
    self:error  "Cannot set at " + string (i)
  fi
end


procedure  t_array:at (i)
  if i >= 0 and i < size	; test valid i
    return  a[i]
  else  
    return %nil
;    self:error  "There is nothing at " + string (i)
  fi
end


procedure  t_array:objectof (i)
  return  self:at (i)
end


; should return failure flag
procedure  t_array:add (v)
  local  x, tmp, ii
;ty "add : fst ",fst," lst ",lst," size ",size

  if lst >= fst
    if lst < size   	; no problem (zet erachter)
      self:setatsafe (lst, v)	; zet achteraan
    else  
      if fst > 1    	; zet vooraan
        self:setatsafe (0, v)
        lst = 1
      else          	; grow en zet achteraan
        if ext > 0  	; grow (en zet achteraan)
          x = self:extend
;        a==a+array(x)		; dit copieert de data
          tmp = array (size + x)	; dit copieert de data niet

          for i = 0 to size - 1
            tmp[i] == a[i]
          od

          a == tmp
          size = size + x
          self:setatsafe (lst, v)	; zet achteraan
        else        	; fail
          self:error  "Cannot grow to add"
        fi
      fi
    fi
  else              	; wrapped circular list
    if lst < fst - 1
      self:setatsafe (lst, v)	; zet middenin
    else            	; grow or split
      if ext > 0
; roll and grow here at once
        x = self:extend
;      a==extr(fst,size-fst,a)+extr(0,lst-1,a)+array(x)

        tmp = array (size + x)	; dit copieert de data niet
        ii = 0

        for i = fst to size - 1
;        ty "copy ",a[i],i
          tmp[ii] == a[i]
          ii = ii + 1
        od

        for i = 0 to lst - 1
;        ty "Copy ",a[i],i
          tmp[ii] == a[i]
          ii = ii + 1
        od

        a == tmp

        fst = 0
        lst = ii
        size = size + x
        self:setatsafe (lst, v)	; zet achteraan
      else  
        self:error  "Cannot grow to add inside"
      fi
    fi
  fi

end


procedure  t_array:includes (v)	; bool
  return   not isnil (self:indexof (v) )
end


procedure  t_array:indexof (v)
  for i = 0 to size - 1
    if isequal (v, self:at (i) ) then  return  i	; gevonden
  od

  return  %nil      	; fail
end


procedure  t_array:iterobj (key)
  return  self:objectof (key)
end


procedure  t_array:nextkey (key, d = 1)
;  ty "nxtkey :",key,d,size

  if d > 0
    if isnil (key) then  key = - 1

    if key >= lst - 1 then  return  %nil

    return  key + 1
  else  
    if isnil (key) then  key = lst

    if key <= 0 then  return  %nil

    return  key - 1
  fi
end


procedure  t_array:forall (funct, ...)
  for i = 0 to self.used - 1
    self:exec (a[i], funct, ...)
  od
end


procedure  t_array:flush ()
  for i = 0 to self.used - 1
    self:setat (i, %nil)
  od

  self.used = 0
end


procedure  t_array:show
  typef  self.classname, " : {"

  for i = 0 to size - 1
    typef  a[i]

    if i < size - 1 then  typef  ","
  od

  ty  "}"
end


procedure  t_array::selftest
  ty  "Create t_array with 3 elements"
  local  s == self:new (3)
  ty  "array has a size of ", s.size, " and ", s.used, " elements used"

  for i = 0 to 2
    s:setat (i, i * 10)
  od

  ty  "array has now size of ", s.size, " and ", s.used, " elements used"
  s:show
  ty  "now it should grow"
  s:setat (6, 30)
  s:show
end


;---------------------------
t_object:subclass  "t_dict"
;---------------------------
; General dictionary

procedure  t_dict:init (d = 10, e = 42)
  size = d;  ext = e;  a = dict (d)
end


procedure  t_dict:fst;  return  1;  end


procedure  t_dict:lst;  return  symbol (a) + 1;  end	; one more


procedure  t_dict:used;  return  symbol (a);  end


; private, can be overridden by subclasses
procedure  t_dict:key (n)
;  ty "t_dict KEY"

  return  n
end


procedure  t_dict:sort
;  ty "Sorting"
  a == sort (a)     	; dit maakt een kopij !!!
end


procedure  t_dict:setat (i, obj)
  if i >= 0 and i < size	; test valid i
    a[i + 1] == obj
  else  
    self:error  "Can not set at " + string (i)
  fi
end


procedure  t_dict:at (i)
  if i >= 0 and i < size	; test valid i
    return  a[i + 1]
  else  
    self:error  "There is nothing at " + string (i)
  fi
end


procedure  t_dict:remat (idx)
  local  cnt = symbol (a)
  local  b = dict (size)

  if idx >= 0 and idx < size	; test valid i
    for i = 1 to cnt
      if i <> idx + 1 then  b[symbol (a[0], i)] == a[i]
    od

    a == b
  else  
    self:error  "There is nothing to remove at " + string (idx)
  fi
end


procedure  t_dict:keyat (idx)
  return  symbol (a[0], idx + 1)
end


procedure  t_dict:keyof (obj)
  for i = 1 to symbol (a)
    if isequal (a[i], obj) then  return  symbol (a, i)
  od

  return  %nil
end


procedure  t_dict:objectof (k)
;  ty "at ",k
  k = self:key (k)
;  ty "objectof ",k,isstring(k)

  return  a[k]
end


procedure  t_dict:setatkey (k, v)
; fails if key does not exist
  k = self:key (k)

  if self:iskey (k)
    self:add (k, v)
  else  
    self:error  "Cannot set at key because it does not exist"
  fi
end


procedure  t_dict:add (n, v)
  local  x, tmp
  n = self:key (n)

  if symbol (a) < size
    a[n] == v
  else  
    if ext > 0      	; grow
      x = self:extend
;      a=a+dict(x)		; this does not work at all !
      tmp = dict (size + x)
      size = size + x

      for i = 1 to symbol (a)
        tmp[symbol (a, i)] == a[i]
      od

      a == tmp
      a[n] == v
    else  
      self:error  "Cannot grow to add"
    fi
  fi
end


procedure  t_dict:rem (obj)
  local  k = self:keyof (obj)

  if isnil (k) then  return  %nil	; fail

  self:rematkey (k)

  return  1
end


procedure  t_dict:rematkey (n)
  local  cnt = symbol (a)
  local  b, s
  n = self:key (n)

  if self:iskey (n)
    b = dict (size)

    for i = 1 to cnt
      s = symbol (a, i)

      if s <> n then  b[s] == a[s]
    od

    a == b
  else  
    self:error  "Cannot remove at key because it does not exist"
  fi
end


procedure  t_dict:iskey (n)	; bool
  n = self:key (n)

  return  (lookup (n, a[0]) > 0)
end


procedure  t_dict:includes (obj)
  return   not isnil (self:keyof (obj) )
end


procedure  t_dict:indexof (obj)
  for i = 1 to symbol (a, 0)
    if isequal (a[i], obj) then  return  (i - 1)
  od

  return  %nil
end


; key is index in symbol table
procedure  t_dict:iterobj (i)
  local  s = symbol (a[0], i + 1)
;ty "symbol ",s," object ",a[s]

  return  a[s]
end


procedure  t_dict:nextkey (key, d = 1)
;  ty "nxtkey :",key,d,size
  local  cnt = symbol (a)

  if d > 0
    if isnil (key) then  key = - 1

    if key >= cnt - 1 then  return  %nil

    return  key + 1
  else  
    if isnil (key) then  key = cnt

    if key <= 0 then  return  %nil

    return  key - 1
  fi
end


procedure  t_dict:flush ()
  a = dict (size)
end


procedure  t_dict:show
  local  cnt = symbol (a)
  typef  self.classname, " : {"

  for i = 1 to cnt
    typef  "\"", symbol (a, i), "\":", a[i]

    if i < cnt then  typef  ","
  od

  ty  "}"
end


procedure  t_dict::selftest
  local  s == self:new (3)
  ty  "Create t_dict with 3 elements"
  s:add ("Z", 10);  ty  "add Z,10"
  s:add ("M", 20);  ty  "add M,20"
  s:add ("A", 30);  ty  "add A,30"
;  for i=1 to 3
;    s:add(string(i),i); ty "add ",i
;  od
  s:show
  ty  "there are now ", s.used, " elements in dict"
  ty  "at 4 there should be nothing and we find ", s:objectof ("4")
;  for i=1 to s.used
;    ty "objectof = ",i,s:objectof(string(i))
;  od
  ty  "objectof A = ", s:objectof ("A")
  ty  "objectof M = ", s:objectof ("M")
  ty  "objectof Z = ", s:objectof ("Z")
  ty  "D is not a key ", s:iskey ("D")
  ty  "Index of 20 is ", s:indexof (20)
  ty  "Key of 20 is ", s:keyof (20)
;  s:show
  s:forall ("show")
  s:sort
;  s:show
  s:forall ("show")
end


;---------------------------
T_Object:subclass  "T_C_Object", "handle"
;---------------------------
; generic "C" object

procedure  T_C_Object:init ()
  super:init ()

  if not self:create () then  return  %nil
end


procedure  T_C_Object:assign ();  return  self;  end


;---------------------------
T_C_Object:subclass  "T_DblLnk"
;---------------------------
; double linked list

procedure  T_DblLnk:init (enter_keys = 0, log_transactions = 0)
  super:init ()

  self.EnterKeys = enter_keys
  self.LogTransactions = log_transactions
end


procedure  T_DblLnk:SetAt (idx, obj)
  local  key == self:KeyAt (idx)

  if not isnil (key) then  T_DblLnk:setval (key, obj)

  return  key
end


procedure  T_DblLnk:At (idx)
  local  key == self:KeyAt (idx)

  if isnil (key) then  return  %nil

  return  T_DblLnk:val (key)
end


procedure  T_DblLnk:RemAt (idx)
  local  key == self:KeyAt (idx)

  if not isnil (key) then  self:RemAtKey (key)
end


procedure  T_DblLnk:Includes (obj)
  return  (not isnil (self:IndexOf (obj) ) )
end


procedure  T_DblLnk:NextKey (key, dir = 1)
  if (dir > 0)
    if isnil (key) then  return  self.KeyAtHead

    return  T_DblLnk:after (key)
  else  
    if isnil (key) then  return  self.KeyAtTail

    return  T_DblLnk:before (key)
  fi
end


procedure  T_DblLnk:Show (level = 0)
  if (self.Used = 0) then  return  

  local  key == self.KeyAtHead

  type  self.classname, "  ", self.Used, " items :"

  typef  " { "

  do 
    exif  isnil (key)

    typef  T_DblLnk:val (key), " "

    if (level = 1) then  key:Show ()

    key == T_DblLnk:after (key)
  od

  ty  "}"
end


procedure  T_DblLnk:Forall (funct, ...)
  local  key == self.KeyAtHead

  do 
    exif  isnil (key)

    self:exec (T_DblLnk:val (key), funct, ...)

    key == T_DblLnk:after (key)
  od
end


procedure  T_DblLnk:DoUntil (cond, funct, ...)
  local  key == self.KeyAtHead

  do 
    exif  isnil (key)

    if (self:exec (T_DblLnk:val (key), funct, ...) = cond) then  return  0

    key == T_DblLnk:after (key)
  od

  return  1
end


procedure  T_DblLnk::selftest
  local  ll == self:New ()

  ll:Show ()
  ll:AddAtTail (1);  ty  "add 1"
  ll:Show ()
  ll:AddAtTail (2);  ty  "add 2"
  ll:Show ()
  ll:AddAtTail (3);  ty  "add 3"
  ll:Show ()
  ll:AddAtHead (0);  ty  "addathead 0"
  ll:Show ()
  ty  "at head is ", ll.Head
  ty  "at tail is ", ll.Tail
  ll:RemAtTail ();  ty  "remove at tail"
  ll:Show ()
  ll:RemAtHead ();  ty  "remove at head"
  ll:Show ()
end


procedure  T_DblLnk::FromArray(arr)
  local newlist == self:new
  for k = 0 to sizeof(arr)-1
    newlist:AddAtTail(arr[k])
  od
  return newlist
end

procedure  T_DblLnk:convert_obj_to_str
  local r == array(2)
  r[0] = self.classname+":FromArray(dtl$params)"
  r[1] == array(self.used)
  local it == T_Iter:new(self)
  local t = 0
  do
    exif it.done
    r[1][t] == it.next
    t = t + 1
  od
  return r
end


;---------------------------
t_array:subclass  "t_boundarray", "low"
;---------------------------
; has up index, low index and extend=0
; lst[1..10]

procedure  t_boundarray:init (l = 1, u = 10, e = 0);  low = l;  super:init (u - l + 1, e);  end


procedure  t_boundarray:setat (i, v);  super:setat (i - low, v);  end


procedure  t_boundarray:at (i);  return  super:at (i - low);  end


procedure  t_boundarray:lower;  return  low;  end


procedure  t_boundarray:upper;  return  low + self.size + 1;  end


procedure  t_boundarray::selftest
  ty  "Selftest not yet available"
end


;---------------------------
t_array:subclass  "t_stack"
;---------------------------
; has size and default can grow

procedure  t_stack:init (d = 10, e = 42);  super:init (d, e);  end


procedure  t_stack:used;  return  lst - fst;  end


procedure  t_stack:push (v);  super:add (v);  end


procedure  t_stack:pop
  local  s

  if lst = fst then  return  %nil

;  ty "lst ",lst
  lst = lst - 1
;  ty "lst ",lst
  s == super:at (lst)
  super:setatsafe (lst, %nil)	; increments lst !!!
  lst = lst - 1

  return  s
end


procedure  t_stack:top
  if lst = fst then  return  %nil

  return  super:at (lst - 1)
end


;procedure t_stack:flush;lst=fst; end		; quick method
procedure  t_stack:flush	; freeing method
  do 
    exif  self.isempty

    self:pop
  od

  lst = fst
end


procedure  t_stack:nextkey (key, d = 1)
;  ty "nxtkey :",key,d,size

  if d > 0
    if isnil (key) then  key = - 1

    if key >= lst - 1 then  return  %nil

    return  key + 1
  else  
    if isnil (key) then  key = lst

    if key <= 0 then  return  %nil

    return  key - 1
  fi
end


procedure  t_stack:show
  typef  self.classname, " : {"

  for i = fst to lst - 1
    typef  a[i]

    if i < lst - 1 then  typef  ","
  od

  ty  "}"
;  ty "fst ",fst," lst ",lst
end


procedure  t_stack::selftest
  local  s == self:new (3)
  ty  "Create stack with 3 elements"

  for i = 1 to 3
    s:push (i);  ty  "Push ", i
  od

  s:show
  ty  "Pop one ", s:pop

  for i = 1 to 3
    ty  "Pop = ", s:pop
  od

  ty  "Last pop should fail"
  ty  "Push again"

  for i = 1 to 3
    s:push (i);  ty  "Push ", i
  od

  ty  "at top is ", s:top
  s:flush
  ty  "Flushing"
  s:show
end


;---------------------------
t_array:subclass  "t_queue"
;---------------------------
; has size and default can grow

; We need one more item in the array because its a circular list !
procedure  t_queue:init (d = 10, e = 42);  super:init (d + 1, e);  end


procedure  t_queue:used
  if lst >= fst
    return  lst - fst
  else  
    return  size - fst + lst
  fi
end


procedure  t_queue:nextkey (key, d = 1)
;  ty "nxtkey :",key,d,size

  if self.isempty then  return  %nil

  if d > 0
    if isnil (key) then  return  fst

    if key = lst - 1 then  return  %nil

    key = key + 1

    if key >= size then  key = 0

    return  key
  else  
    if isnil (key) then  return  (lst - 1)

    if key = fst then  return  %nil

    key = key - 1

    if key < 0 then  key = size - 1

    return  key
  fi
end


procedure  t_queue:put (v);  super:add (v);  end


procedure  t_queue:get
  local  f = fst
  local  s == super:at (f)

  if self:used () = 0 then  return  %nil

  super:setatsafe (f, %nil)
  fst = fst + 1

  if fst = lst      	; roll to begin
    fst = 0
    lst = 0
  fi

  if fst >= size    	; wrap
    fst = 0
  fi

  return  s
end


procedure  t_queue:first
  local  f = fst

  if self:used () = 0 then  return  %nil

  return  super:at (f)
end


;procedure t_queue:flush; fst=0; lst=fst; end	; quick method
procedure  t_queue:flush	; freeing method
  do 
    exif  self.isempty

    self:get
  od

  lst = fst
end


procedure  t_queue:show
  local  i = fst
  typef  self.classname, " : {"

  do 
    exif  i = lst

    if i >= size then  i = 0

    if i <> fst then  typef  ","

    typef  a[i]
    i = i + 1
  od

  ty  "}"
end


procedure  t_queue::selftest
  local  s == self:new (3)
  ty  "Create queue with 3 elements"

  for i = 1 to 3
    s:put (i);  ty  "Put ", i
  od

;  s:put(i); ty "Put should fail because queue cannot grow"
  s:show
  ty  "get one ", s:get
  ty  "There are now ", s.used, " elements"

  for i = 1 to s.used + 1
    ty  "get = ", s:get
  od

  ty  "Last get should fail"
  ty  "put again"

  for i = 1 to 3
    s:put (i);  ty  "Put ", i
  od

  ty  "First is ", s:first
  ty  "Flush"
  s:flush
  s:show
end


;---------------------------
t_dict:subclass  "t_symdict"
;---------------------------
; uppercase only dictionary (for symbol tables)

procedure  t_symdict:key (n)
  return  lowcase (n)
end


procedure  t_symdict::selftest
  local  s == self:new (3)
  ty  "Create t_symdict with 3 elements"
  s:add ("a", 10);  ty  "add a ", 10
  s:add ("b", 20);  ty  "add b ", 20
  s:add ("A", 30);  ty  "add A ", 30
  s:show
  ty  "there are now ", s.used, " elements in dict"
;  ty "at 4 we find ",s:at("4")
;  for i=1 to s.used
;    ty "at = ",i,s:atkey(string(i))
;  od
end


;---------------------------
t_dict:subclass  "t_numdict"
;---------------------------
; sparse array

procedure  t_numdict:key (n)
;  ty "t_numdict KEY"

  return  string (n)
end


procedure  t_numdict::selftest
  local  s == self:new (3)
  ty  "Create t_numdict with 3 elements"

  for i = 1 to 3
    s:add (i, i * 10);  ty  "add ", i, i * 10
  od

  s:show
;  ty "at 4 we find ",s:at(4)
;  for i=1 to 3
;    ty "at = ",i,s:at(i)
;  od
end


dtl$debug = dbgtmp
